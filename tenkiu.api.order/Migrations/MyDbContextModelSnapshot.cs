// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using tenkiu.api.order.Context;

#nullable disable

namespace tenkiu.api.order.Migrations
{
    [DbContext(typeof(MyDbContext))]
    partial class MyDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("tenkiu.api.order.Models.Entities.BuyOrder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("ID_Buy_Order");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BaseCurrencyId")
                        .HasColumnType("int(11)")
                        .HasColumnName("Base_Currency_Id");

                    b.Property<int>("ConvertedCurrencyId")
                        .HasColumnType("int(11)")
                        .HasColumnName("Converted_Currency_Id");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int(11)")
                        .HasColumnName("Created_by");

                    b.Property<DateTime>("CreatedDt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasColumnName("Created_dt")
                        .HasDefaultValueSql("current_timestamp()");

                    b.Property<decimal>("ExchangeRate")
                        .HasPrecision(18, 8)
                        .HasColumnType("decimal(18,8)")
                        .HasColumnName("Exchange_Rate");

                    b.Property<int>("IdStore")
                        .HasColumnType("int(11)")
                        .HasColumnName("ID_Store");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int(11)")
                        .HasColumnName("Modified_by");

                    b.Property<DateTime?>("ModifiedDt")
                        .HasColumnType("timestamp")
                        .HasColumnName("Modified_dt");

                    b.Property<DateOnly>("PurchaseDate")
                        .HasColumnType("date")
                        .HasColumnName("Purchase_Date");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("Buy_Order");
                });

            modelBuilder.Entity("tenkiu.api.order.Models.Entities.BuyOrderDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("ID_Buy_Order_Details");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BuyOrderId")
                        .HasColumnType("int(11)")
                        .HasColumnName("ID_Buy_Order");

                    b.Property<decimal>("ConvertedPurchasePrice")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("Converted_Purchase_Price");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int(11)")
                        .HasColumnName("Created_by");

                    b.Property<DateTime>("CreatedDt")
                        .HasColumnType("timestamp")
                        .HasColumnName("Created_dt");

                    b.Property<int>("IdCurrencyConvertedPurchase")
                        .HasColumnType("int(11)")
                        .HasColumnName("ID_Currency_Converted_Purchase");

                    b.Property<int>("IdCurrencyPurchase")
                        .HasColumnType("int(11)")
                        .HasColumnName("ID_Currency_Purchase");

                    b.Property<int>("IdProduct")
                        .HasColumnType("int(11)")
                        .HasColumnName("ID_Product");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int(11)")
                        .HasColumnName("Modified_by");

                    b.Property<DateTime?>("ModifiedDt")
                        .HasColumnType("timestamp")
                        .HasColumnName("Modified_dt");

                    b.Property<decimal>("PurchasePrice")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("Purchase_Price");

                    b.Property<decimal>("PurchasePriceTax")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("Purchase_Price_Tax");

                    b.Property<int>("Quantity")
                        .HasColumnType("int(11)");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex("BuyOrderId");

                    b.ToTable("Buy_Order_Details");
                });

            modelBuilder.Entity("tenkiu.api.order.Models.Entities.BuySellAllocation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("ID_Allocation");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BuyOrderDetailId")
                        .HasColumnType("int(11)")
                        .HasColumnName("ID_Buy_Order_Detail");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int(11)")
                        .HasColumnName("Created_by");

                    b.Property<DateTime>("CreatedDt")
                        .HasColumnType("timestamp")
                        .HasColumnName("Created_dt");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int(11)")
                        .HasColumnName("Modified_by");

                    b.Property<DateTime?>("ModifiedDt")
                        .HasColumnType("timestamp")
                        .HasColumnName("Modified_dt");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("decimal(65,30)")
                        .HasColumnName("Quantity");

                    b.Property<int>("SellOrderDetailId")
                        .HasColumnType("int(11)")
                        .HasColumnName("ID_Sell_Order_Detail");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex("BuyOrderDetailId");

                    b.HasIndex("SellOrderDetailId");

                    b.ToTable("BuySell_Allocation");
                });

            modelBuilder.Entity("tenkiu.api.order.Models.Entities.DeliveryPeriod", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("ID_Delivery_Period");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int(11)")
                        .HasColumnName("Created_by");

                    b.Property<DateTime>("CreatedDt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasColumnName("Created_dt")
                        .HasDefaultValueSql("current_timestamp()");

                    b.Property<DateOnly>("EndDate")
                        .HasColumnType("date")
                        .HasColumnName("End_Date");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("Is_Active");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int(11)")
                        .HasColumnName("Modified_by");

                    b.Property<DateTime?>("ModifiedDt")
                        .HasColumnType("timestamp")
                        .HasColumnName("Modified_dt");

                    b.Property<string>("PeriodName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Period_Name");

                    b.Property<DateOnly>("StartDate")
                        .HasColumnType("date")
                        .HasColumnName("Start_Date");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("Delivery_Periods");
                });

            modelBuilder.Entity("tenkiu.api.order.Models.Entities.ExchangeRate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("ID_Exchange_Rate");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int(11)")
                        .HasColumnName("Created_by");

                    b.Property<DateTime>("CreatedDt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasColumnName("Created_dt")
                        .HasDefaultValueSql("current_timestamp()");

                    b.Property<decimal>("ExchangeRate1")
                        .HasPrecision(10, 4)
                        .HasColumnType("decimal(10,4)")
                        .HasColumnName("Exchange_Rate");

                    b.Property<int>("IdCurrencyDestination")
                        .HasColumnType("int(11)")
                        .HasColumnName("ID_Currency_Destination");

                    b.Property<int>("IdCurrencyOrigen")
                        .HasColumnType("int(11)")
                        .HasColumnName("ID_Currency_Origen");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int(11)")
                        .HasColumnName("Modified_by");

                    b.Property<DateTime?>("ModifiedDt")
                        .HasColumnType("timestamp")
                        .HasColumnName("Modified_dt");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("Exchange_Rate");
                });

            modelBuilder.Entity("tenkiu.api.order.Models.Entities.RelationOrderDetailsStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("ID_Relation_ODS");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int(11)")
                        .HasColumnName("Created_by");

                    b.Property<DateTime>("CreatedDt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasColumnName("Created_dt")
                        .HasDefaultValueSql("current_timestamp()");

                    b.Property<DateOnly>("DateRelation")
                        .HasColumnType("date")
                        .HasColumnName("Date_Relation");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int(11)")
                        .HasColumnName("Modified_by");

                    b.Property<DateTime?>("ModifiedDt")
                        .HasColumnType("timestamp")
                        .HasColumnName("Modified_dt");

                    b.Property<int>("SellOrderDetailId")
                        .HasColumnType("int(11)")
                        .HasColumnName("ID_Order_Details");

                    b.Property<int>("StatusOrderDetailId")
                        .HasColumnType("int(11)")
                        .HasColumnName("ID_Status_Product");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "SellOrderDetailId" }, "ID_Order_Details");

                    b.HasIndex(new[] { "StatusOrderDetailId" }, "ID_Status_Product");

                    b.ToTable("Relation_Order_Details_Status");
                });

            modelBuilder.Entity("tenkiu.api.order.Models.Entities.SellOrder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("ID_Sell_Order");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BaseCurrencyId")
                        .HasColumnType("int(11)")
                        .HasColumnName("Base_Currency_Id");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int(11)")
                        .HasColumnName("Created_by");

                    b.Property<DateTime>("CreatedDt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasColumnName("Created_dt")
                        .HasDefaultValueSql("current_timestamp()");

                    b.Property<DateOnly>("DeliveryDate")
                        .HasColumnType("date")
                        .HasColumnName("Delivery_Date");

                    b.Property<int>("DeliveryPeriodId")
                        .HasColumnType("int(11)")
                        .HasColumnName("ID_Delivery_Period");

                    b.Property<string>("Hash")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32)")
                        .HasColumnName("hash");

                    b.Property<int>("IdClient")
                        .HasColumnType("int(11)")
                        .HasColumnName("ID_Client");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int(11)")
                        .HasColumnName("Modified_by");

                    b.Property<DateTime?>("ModifiedDt")
                        .HasColumnType("timestamp")
                        .HasColumnName("Modified_dt");

                    b.Property<decimal>("TotalSellPrice")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("Total_Sell_Price");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex("DeliveryPeriodId");

                    b.ToTable("Sell_Order");
                });

            modelBuilder.Entity("tenkiu.api.order.Models.Entities.SellOrderDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("ID_Sell_Order_Details");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int(11)")
                        .HasColumnName("Created_by");

                    b.Property<DateTime>("CreatedDt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasColumnName("Created_dt")
                        .HasDefaultValueSql("current_timestamp()");

                    b.Property<int>("IdCurrencySell")
                        .HasColumnType("int(11)")
                        .HasColumnName("ID_Currency_Sell");

                    b.Property<int>("IdProduct")
                        .HasColumnType("int(11)")
                        .HasColumnName("ID_Product");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int(11)")
                        .HasColumnName("Modified_by");

                    b.Property<DateTime?>("ModifiedDt")
                        .HasColumnType("timestamp")
                        .HasColumnName("Modified_dt");

                    b.Property<int>("Quantity")
                        .HasColumnType("int(11)");

                    b.Property<int>("SellOrderId")
                        .HasColumnType("int(11)")
                        .HasColumnName("ID_Sell_Order");

                    b.Property<decimal>("SellPrice")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("Sell_Price");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex("SellOrderId");

                    b.ToTable("Sell_Order_Details");
                });

            modelBuilder.Entity("tenkiu.api.order.Models.Entities.SellOrderPaymentHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("ID_Payment_History");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Amount")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int(11)")
                        .HasColumnName("Created_by");

                    b.Property<DateTime>("CreatedDt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasColumnName("Created_dt")
                        .HasDefaultValueSql("current_timestamp()");

                    b.Property<int>("IdClient")
                        .HasColumnType("int(11)")
                        .HasColumnName("ID_Client");

                    b.Property<int>("IdCurrency")
                        .HasColumnType("int(11)")
                        .HasColumnName("ID_Currency");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int(11)")
                        .HasColumnName("Modified_by");

                    b.Property<DateTime?>("ModifiedDt")
                        .HasColumnType("timestamp")
                        .HasColumnName("Modified_dt");

                    b.Property<string>("Notes")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("Notes");

                    b.Property<DateOnly>("PaymentDate")
                        .HasColumnType("date")
                        .HasColumnName("Payment_Date");

                    b.Property<int>("PaymentDirection")
                        .HasColumnType("int(11)")
                        .HasColumnName("Payment_Direction");

                    b.Property<int>("PaymentReason")
                        .HasColumnType("int(11)")
                        .HasColumnName("Payment_Reason");

                    b.Property<int>("PaymentType")
                        .HasColumnType("int(11)")
                        .HasColumnName("Payment_Type");

                    b.Property<int>("SellOrderId")
                        .HasColumnType("int(11)")
                        .HasColumnName("ID_Sell_Order");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex("SellOrderId");

                    b.ToTable("Sell_Order_Payment_History");
                });

            modelBuilder.Entity("tenkiu.api.order.Models.Entities.SellOrderShipping", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("ID_Shipping");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int(11)")
                        .HasColumnName("Created_by");

                    b.Property<DateTime>("CreatedDt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasColumnName("Created_dt")
                        .HasDefaultValueSql("current_timestamp()");

                    b.Property<DateOnly?>("DateShipping")
                        .HasColumnType("date")
                        .HasColumnName("Date_Shipping");

                    b.Property<string>("GuideNumber")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Guide_Number");

                    b.Property<int>("IdShippingType")
                        .HasColumnType("int(11)")
                        .HasColumnName("ID_Shipping_Type");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int(11)")
                        .HasColumnName("Modified_by");

                    b.Property<DateTime?>("ModifiedDt")
                        .HasColumnType("timestamp")
                        .HasColumnName("Modified_dt");

                    b.Property<int>("SellOrderId")
                        .HasColumnType("int(11)")
                        .HasColumnName("ID_Order");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "SellOrderId" }, "ID_Order");

                    b.ToTable("Shipping");
                });

            modelBuilder.Entity("tenkiu.api.order.Models.Entities.SellOrderStatusRelation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("ID_Relation_Order_Status");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int(11)")
                        .HasColumnName("Created_by");

                    b.Property<DateTime>("CreatedDt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasColumnName("Created_dt")
                        .HasDefaultValueSql("current_timestamp()");

                    b.Property<DateOnly>("DateRelation")
                        .HasColumnType("date")
                        .HasColumnName("Date_Relation");

                    b.Property<int>("IdStatusOrder")
                        .HasColumnType("int(11)")
                        .HasColumnName("ID_Status_Order");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int(11)")
                        .HasColumnName("Modified_by");

                    b.Property<DateTime?>("ModifiedDt")
                        .HasColumnType("timestamp")
                        .HasColumnName("Modified_dt");

                    b.Property<int>("SellOrderId")
                        .HasColumnType("int(11)")
                        .HasColumnName("ID_Order");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "SellOrderId" }, "ID_Order")
                        .HasDatabaseName("ID_Order1");

                    b.HasIndex(new[] { "IdStatusOrder" }, "ID_Status_Order");

                    b.ToTable("Relation_Order_Status");
                });

            modelBuilder.Entity("tenkiu.api.order.Models.Entities.ShippingType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("ID_Shipping_Type");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int(11)")
                        .HasColumnName("Created_by");

                    b.Property<DateTime>("CreatedDt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasColumnName("Created_dt")
                        .HasDefaultValueSql("current_timestamp()");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int(11)")
                        .HasColumnName("Modified_by");

                    b.Property<DateTime?>("ModifiedDt")
                        .HasColumnType("timestamp")
                        .HasColumnName("Modified_dt");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("WebSite")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("Web_site");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("Shipping_Types");
                });

            modelBuilder.Entity("tenkiu.api.order.Models.Entities.StatusOrder", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int(11)")
                        .HasColumnName("ID_Status_Order");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int(11)")
                        .HasColumnName("Created_by");

                    b.Property<DateTime>("CreatedDt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasColumnName("Created_dt")
                        .HasDefaultValueSql("current_timestamp()");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int(11)")
                        .HasColumnName("Modified_by");

                    b.Property<DateTime?>("ModifiedDt")
                        .HasColumnType("timestamp")
                        .HasColumnName("Modified_dt");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("Status_Order");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedBy = 0,
                            CreatedDt = DateTime.Now,
                            Description = "Order has been created in the system.",
                            Name = "Created"
                        },
                        new
                        {
                            Id = 2,
                            CreatedBy = 0,
                            CreatedDt = DateTime.Now,
                            Description = "Order initialization is complete and awaiting confirmation.",
                            Name = "Initialized"
                        },
                        new
                        {
                            Id = 3,
                            CreatedBy = 0,
                            CreatedDt = DateTime.Now,
                            Description = "Order has been confirmed by the customer or system.",
                            Name = "Confirmed"
                        },
                        new
                        {
                            Id = 4,
                            CreatedBy = 0,
                            CreatedDt = DateTime.Now,
                            Description = "Order is being processed and items are being prepared.",
                            Name = "Processing"
                        },
                        new
                        {
                            Id = 5,
                            CreatedBy = 0,
                            CreatedDt = DateTime.Now,
                            Description = "Order items have been packed and are ready for shipping.",
                            Name = "Packed"
                        },
                        new
                        {
                            Id = 6,
                            CreatedBy = 0,
                            CreatedDt = DateTime.Now,
                            Description = "Order has been shipped to the delivery address.",
                            Name = "Shipped"
                        },
                        new
                        {
                            Id = 7,
                            CreatedBy = 0,
                            CreatedDt = DateTime.Now,
                            Description = "Order is out for delivery with the carrier.",
                            Name = "OutForDelivery"
                        },
                        new
                        {
                            Id = 8,
                            CreatedBy = 0,
                            CreatedDt = DateTime.Now,
                            Description = "Order has been delivered to the recipient.",
                            Name = "Delivered"
                        },
                        new
                        {
                            Id = 9,
                            CreatedBy = 0,
                            CreatedDt = DateTime.Now,
                            Description = "Order has been cancelled and will not be fulfilled.",
                            Name = "Cancelled"
                        },
                        new
                        {
                            Id = 10,
                            CreatedBy = 0,
                            CreatedDt = DateTime.Now,
                            Description = "Order has been returned by the customer.",
                            Name = "Returned"
                        },
                        new
                        {
                            Id = 11,
                            CreatedBy = 0,
                            CreatedDt = DateTime.Now,
                            Description = "Order payment has been refunded.",
                            Name = "Refunded"
                        });
                });

            modelBuilder.Entity("tenkiu.api.order.Models.Entities.StatusOrderDetail", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int(11)")
                        .HasColumnName("ID_Status_Order_Detail");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int(11)")
                        .HasColumnName("Created_by");

                    b.Property<DateTime>("CreatedDt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasColumnName("Created_dt")
                        .HasDefaultValueSql("current_timestamp()");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int(11)")
                        .HasColumnName("Modified_by");

                    b.Property<DateTime?>("ModifiedDt")
                        .HasColumnType("timestamp")
                        .HasColumnName("Modified_dt");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("Status_Order_Detail");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedBy = 0,
                            CreatedDt = DateTime.Now,
                            Description = "Product is pending purchase.",
                            Name = "Pending"
                        },
                        new
                        {
                            Id = 2,
                            CreatedBy = 0,
                            CreatedDt = DateTime.Now,
                            Description = "Product purchase has been completed.",
                            Name = "Purchased"
                        },
                        new
                        {
                            Id = 3,
                            CreatedBy = 0,
                            CreatedDt = DateTime.Now,
                            Description = "Product is being prepared for shipment.",
                            Name = "InPreparation"
                        },
                        new
                        {
                            Id = 4,
                            CreatedBy = 0,
                            CreatedDt = DateTime.Now,
                            Description = "Product has been packaged.",
                            Name = "Packed"
                        },
                        new
                        {
                            Id = 5,
                            CreatedBy = 0,
                            CreatedDt = DateTime.Now,
                            Description = "Product is in transit to the destination.",
                            Name = "InTransit"
                        },
                        new
                        {
                            Id = 6,
                            CreatedBy = 0,
                            CreatedDt = DateTime.Now,
                            Description = "Product has been delivered to the recipient.",
                            Name = "Delivered"
                        },
                        new
                        {
                            Id = 7,
                            CreatedBy = 0,
                            CreatedDt = DateTime.Now,
                            Description = "Product order has been cancelled.",
                            Name = "Cancelled"
                        },
                        new
                        {
                            Id = 8,
                            CreatedBy = 0,
                            CreatedDt = DateTime.Now,
                            Description = "Product has been returned by the customer.",
                            Name = "Returned"
                        },
                        new
                        {
                            Id = 9,
                            CreatedBy = 0,
                            CreatedDt = DateTime.Now,
                            Description = "Product is on backorder due to stock unavailability.",
                            Name = "Backordered"
                        });
                });

            modelBuilder.Entity("tenkiu.api.order.Models.Entities.BuyOrderDetail", b =>
                {
                    b.HasOne("tenkiu.api.order.Models.Entities.BuyOrder", "BuyOrder")
                        .WithMany("BuyOrderDetails")
                        .HasForeignKey("BuyOrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("Buy_Order_Details_ibfk_1");

                    b.Navigation("BuyOrder");
                });

            modelBuilder.Entity("tenkiu.api.order.Models.Entities.BuySellAllocation", b =>
                {
                    b.HasOne("tenkiu.api.order.Models.Entities.BuyOrderDetail", "BuyOrderDetail")
                        .WithMany("BuySellAllocations")
                        .HasForeignKey("BuyOrderDetailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("BuySell_Allocation_ibfk_1");

                    b.HasOne("tenkiu.api.order.Models.Entities.SellOrderDetail", "SellOrderDetail")
                        .WithMany("BuySellAllocations")
                        .HasForeignKey("SellOrderDetailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("BuySell_Allocation_ibfk_2");

                    b.Navigation("BuyOrderDetail");

                    b.Navigation("SellOrderDetail");
                });

            modelBuilder.Entity("tenkiu.api.order.Models.Entities.RelationOrderDetailsStatus", b =>
                {
                    b.HasOne("tenkiu.api.order.Models.Entities.SellOrderDetail", "SellOrderDetail")
                        .WithMany("RelationOrderDetailsStatuses")
                        .HasForeignKey("SellOrderDetailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("Relation_Order_Details_Status_ibfk_1");

                    b.HasOne("tenkiu.api.order.Models.Entities.StatusOrderDetail", "StatusOrderDetail")
                        .WithMany("RelationOrderDetailsStatuses")
                        .HasForeignKey("StatusOrderDetailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("Relation_Order_Details_Status_ibfk_2");

                    b.Navigation("SellOrderDetail");

                    b.Navigation("StatusOrderDetail");
                });

            modelBuilder.Entity("tenkiu.api.order.Models.Entities.SellOrder", b =>
                {
                    b.HasOne("tenkiu.api.order.Models.Entities.DeliveryPeriod", "DeliveryPeriod")
                        .WithMany("SellOrders")
                        .HasForeignKey("DeliveryPeriodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("Delivery_Periods_ibfk_1");

                    b.Navigation("DeliveryPeriod");
                });

            modelBuilder.Entity("tenkiu.api.order.Models.Entities.SellOrderDetail", b =>
                {
                    b.HasOne("tenkiu.api.order.Models.Entities.SellOrder", "SellOrder")
                        .WithMany("SellOrderDetails")
                        .HasForeignKey("SellOrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("Sell_Order_Details_ibfk_1");

                    b.Navigation("SellOrder");
                });

            modelBuilder.Entity("tenkiu.api.order.Models.Entities.SellOrderPaymentHistory", b =>
                {
                    b.HasOne("tenkiu.api.order.Models.Entities.SellOrder", "SellOrder")
                        .WithMany("SellOrderPaymentHistories")
                        .HasForeignKey("SellOrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("Payment_History_ibfk_1");

                    b.Navigation("SellOrder");
                });

            modelBuilder.Entity("tenkiu.api.order.Models.Entities.SellOrderShipping", b =>
                {
                    b.HasOne("tenkiu.api.order.Models.Entities.SellOrder", "SellOrder")
                        .WithMany("SellOrderShippings")
                        .HasForeignKey("SellOrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("Shipping_ibfk_1");

                    b.Navigation("SellOrder");
                });

            modelBuilder.Entity("tenkiu.api.order.Models.Entities.SellOrderStatusRelation", b =>
                {
                    b.HasOne("tenkiu.api.order.Models.Entities.StatusOrder", "StatusOrder")
                        .WithMany("RelationOrderStatuses")
                        .HasForeignKey("IdStatusOrder")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("Relation_Order_Status_ibfk_2");

                    b.HasOne("tenkiu.api.order.Models.Entities.SellOrder", "SellOrder")
                        .WithMany("SellOrderStatusRelations")
                        .HasForeignKey("SellOrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("Relation_Order_Status_ibfk_1");

                    b.Navigation("SellOrder");

                    b.Navigation("StatusOrder");
                });

            modelBuilder.Entity("tenkiu.api.order.Models.Entities.BuyOrder", b =>
                {
                    b.Navigation("BuyOrderDetails");
                });

            modelBuilder.Entity("tenkiu.api.order.Models.Entities.BuyOrderDetail", b =>
                {
                    b.Navigation("BuySellAllocations");
                });

            modelBuilder.Entity("tenkiu.api.order.Models.Entities.DeliveryPeriod", b =>
                {
                    b.Navigation("SellOrders");
                });

            modelBuilder.Entity("tenkiu.api.order.Models.Entities.SellOrder", b =>
                {
                    b.Navigation("SellOrderDetails");

                    b.Navigation("SellOrderPaymentHistories");

                    b.Navigation("SellOrderShippings");

                    b.Navigation("SellOrderStatusRelations");
                });

            modelBuilder.Entity("tenkiu.api.order.Models.Entities.SellOrderDetail", b =>
                {
                    b.Navigation("BuySellAllocations");

                    b.Navigation("RelationOrderDetailsStatuses");
                });

            modelBuilder.Entity("tenkiu.api.order.Models.Entities.StatusOrder", b =>
                {
                    b.Navigation("RelationOrderStatuses");
                });

            modelBuilder.Entity("tenkiu.api.order.Models.Entities.StatusOrderDetail", b =>
                {
                    b.Navigation("RelationOrderDetailsStatuses");
                });
#pragma warning restore 612, 618
        }
    }
}
