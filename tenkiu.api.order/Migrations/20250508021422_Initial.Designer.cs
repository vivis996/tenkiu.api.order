// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using tenkiu.api.order.Context;

#nullable disable

namespace tenkiu.api.order.Migrations
{
    [DbContext(typeof(MyDbContext))]
    [Migration("20250508021422_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseCollation("utf8mb4_general_ci")
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.HasCharSet(modelBuilder, "utf8mb4");
            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("tenkiu.api.order.Models.Entities.ExchangeRate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("ID_Exchange_Rate");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int(11)")
                        .HasColumnName("Created_by");

                    b.Property<DateTime>("CreatedDt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasColumnName("Created_dt")
                        .HasDefaultValueSql("current_timestamp()");

                    b.Property<decimal>("ExchangeRate1")
                        .HasPrecision(10, 4)
                        .HasColumnType("decimal(10,4)")
                        .HasColumnName("Exchange_Rate");

                    b.Property<int>("IdCurrencyDestination")
                        .HasColumnType("int(11)")
                        .HasColumnName("ID_Currency_Destination");

                    b.Property<int>("IdCurrencyOrigen")
                        .HasColumnType("int(11)")
                        .HasColumnName("ID_Currency_Origen");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int(11)")
                        .HasColumnName("Modified_by");

                    b.Property<DateTime?>("ModifiedDt")
                        .HasColumnType("timestamp")
                        .HasColumnName("Modified_dt");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("Exchange_Rate");
                });

            modelBuilder.Entity("tenkiu.api.order.Models.Entities.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("ID_Order");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int(11)")
                        .HasColumnName("Created_by");

                    b.Property<DateTime>("CreatedDt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasColumnName("Created_dt")
                        .HasDefaultValueSql("current_timestamp()");

                    b.Property<DateOnly>("DeliveryDate")
                        .HasColumnType("date")
                        .HasColumnName("Delivery_Date");

                    b.Property<string>("DeliverySeason")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Delivery_season");

                    b.Property<string>("Hash")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32)")
                        .HasColumnName("hash");

                    b.Property<int>("IdClient")
                        .HasColumnType("int(11)")
                        .HasColumnName("ID_Client");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int(11)")
                        .HasColumnName("Modified_by");

                    b.Property<DateTime?>("ModifiedDt")
                        .HasColumnType("timestamp")
                        .HasColumnName("Modified_dt");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("tenkiu.api.order.Models.Entities.OrderDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("ID_Order_Details");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int(11)")
                        .HasColumnName("Created_by");

                    b.Property<DateTime>("CreatedDt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasColumnName("Created_dt")
                        .HasDefaultValueSql("current_timestamp()");

                    b.Property<int>("IdCurrencyListed")
                        .HasColumnType("int(11)")
                        .HasColumnName("ID_Currency_Listed");

                    b.Property<int>("IdCurrencyPurchase")
                        .HasColumnType("int(11)")
                        .HasColumnName("ID_Currency_Purchase");

                    b.Property<int>("IdCurrencySell")
                        .HasColumnType("int(11)")
                        .HasColumnName("ID_Currency_Sell");

                    b.Property<int>("IdOrder")
                        .HasColumnType("int(11)")
                        .HasColumnName("ID_Order");

                    b.Property<int>("IdProduct")
                        .HasColumnType("int(11)")
                        .HasColumnName("ID_Product");

                    b.Property<decimal>("ListedPrice")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("Listed_Price");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int(11)")
                        .HasColumnName("Modified_by");

                    b.Property<DateTime?>("ModifiedDt")
                        .HasColumnType("timestamp")
                        .HasColumnName("Modified_dt");

                    b.Property<decimal>("PurchasePrice")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("Purchase_Price");

                    b.Property<decimal>("PurchasePriceTax")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("Purchase_Price_Tax");

                    b.Property<int>("Quantity")
                        .HasColumnType("int(11)");

                    b.Property<decimal>("SellPrice")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("Sell_Price");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "IdOrder" }, "ID_Order");

                    b.ToTable("Order_Details");
                });

            modelBuilder.Entity("tenkiu.api.order.Models.Entities.PaymentHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("ID_Payment_History");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Amount")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int(11)")
                        .HasColumnName("Created_by");

                    b.Property<DateTime>("CreatedDt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasColumnName("Created_dt")
                        .HasDefaultValueSql("current_timestamp()");

                    b.Property<int>("IdCurrency")
                        .HasColumnType("int(11)")
                        .HasColumnName("ID_Currency");

                    b.Property<int>("IdOrder")
                        .HasColumnType("int(11)")
                        .HasColumnName("ID_Order");

                    b.Property<int>("IdUser")
                        .HasColumnType("int(11)")
                        .HasColumnName("ID_User");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int(11)")
                        .HasColumnName("Modified_by");

                    b.Property<DateTime?>("ModifiedDt")
                        .HasColumnType("timestamp")
                        .HasColumnName("Modified_dt");

                    b.Property<string>("Notes")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("Notes");

                    b.Property<int>("PaymentType")
                        .HasColumnType("int(11)")
                        .HasColumnName("Payment_Type");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "IdOrder" }, "ID_Order")
                        .HasDatabaseName("ID_Order1");

                    b.ToTable("Payment_History");
                });

            modelBuilder.Entity("tenkiu.api.order.Models.Entities.RelationOrderDetailsStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("ID_Relation_ODS");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int(11)")
                        .HasColumnName("Created_by");

                    b.Property<DateTime>("CreatedDt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasColumnName("Created_dt")
                        .HasDefaultValueSql("current_timestamp()");

                    b.Property<DateOnly>("DateRelation")
                        .HasColumnType("date")
                        .HasColumnName("Date_Relation");

                    b.Property<int>("IdOrderDetails")
                        .HasColumnType("int(11)")
                        .HasColumnName("ID_Order_Details");

                    b.Property<int>("IdStatusProduct")
                        .HasColumnType("int(11)")
                        .HasColumnName("ID_Status_Product");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int(11)")
                        .HasColumnName("Modified_by");

                    b.Property<DateTime?>("ModifiedDt")
                        .HasColumnType("timestamp")
                        .HasColumnName("Modified_dt");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "IdOrderDetails" }, "ID_Order_Details");

                    b.HasIndex(new[] { "IdStatusProduct" }, "ID_Status_Product");

                    b.ToTable("Relation_Order_Details_Status");
                });

            modelBuilder.Entity("tenkiu.api.order.Models.Entities.RelationOrderStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("ID_Relation_Order_Status");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int(11)")
                        .HasColumnName("Created_by");

                    b.Property<DateTime>("CreatedDt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasColumnName("Created_dt")
                        .HasDefaultValueSql("current_timestamp()");

                    b.Property<DateOnly>("DateRelation")
                        .HasColumnType("date")
                        .HasColumnName("Date_Relation");

                    b.Property<int>("IdOrder")
                        .HasColumnType("int(11)")
                        .HasColumnName("ID_Order");

                    b.Property<int>("IdStatusOrder")
                        .HasColumnType("int(11)")
                        .HasColumnName("ID_Status_Order");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int(11)")
                        .HasColumnName("Modified_by");

                    b.Property<DateTime?>("ModifiedDt")
                        .HasColumnType("timestamp")
                        .HasColumnName("Modified_dt");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "IdOrder" }, "ID_Order")
                        .HasDatabaseName("ID_Order2");

                    b.HasIndex(new[] { "IdStatusOrder" }, "ID_Status_Order");

                    b.ToTable("Relation_Order_Status");
                });

            modelBuilder.Entity("tenkiu.api.order.Models.Entities.Shipping", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("ID_Shipping");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int(11)")
                        .HasColumnName("Created_by");

                    b.Property<DateTime>("CreatedDt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasColumnName("Created_dt")
                        .HasDefaultValueSql("current_timestamp()");

                    b.Property<DateOnly?>("DateShipping")
                        .HasColumnType("date")
                        .HasColumnName("Date_Shipping");

                    b.Property<string>("GuideNumber")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Guide_Number");

                    b.Property<int>("IdOrder")
                        .HasColumnType("int(11)")
                        .HasColumnName("ID_Order");

                    b.Property<int>("IdShippingType")
                        .HasColumnType("int(11)")
                        .HasColumnName("ID_Shipping_Type");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int(11)")
                        .HasColumnName("Modified_by");

                    b.Property<DateTime?>("ModifiedDt")
                        .HasColumnType("timestamp")
                        .HasColumnName("Modified_dt");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "IdOrder" }, "ID_Order")
                        .HasDatabaseName("ID_Order3");

                    b.ToTable("Shipping");
                });

            modelBuilder.Entity("tenkiu.api.order.Models.Entities.ShippingType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("ID_Shipping_Type");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int(11)")
                        .HasColumnName("Created_by");

                    b.Property<DateTime>("CreatedDt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasColumnName("Created_dt")
                        .HasDefaultValueSql("current_timestamp()");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int(11)")
                        .HasColumnName("Modified_by");

                    b.Property<DateTime?>("ModifiedDt")
                        .HasColumnType("timestamp")
                        .HasColumnName("Modified_dt");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("WebSite")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("Web_site");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("Shipping_Types");
                });

            modelBuilder.Entity("tenkiu.api.order.Models.Entities.StatusOrder", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int(11)")
                        .HasColumnName("ID_Status_Order");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int(11)")
                        .HasColumnName("Created_by");

                    b.Property<DateTime>("CreatedDt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasColumnName("Created_dt")
                        .HasDefaultValueSql("current_timestamp()");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int(11)")
                        .HasColumnName("Modified_by");

                    b.Property<DateTime?>("ModifiedDt")
                        .HasColumnType("timestamp")
                        .HasColumnName("Modified_dt");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("Status_Order");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedBy = 0,
                            CreatedDt = new DateTime(2025, 5, 8, 2, 14, 22, 296, DateTimeKind.Utc).AddTicks(6100),
                            Description = "Order has been created in the system.",
                            Name = "Created"
                        },
                        new
                        {
                            Id = 2,
                            CreatedBy = 0,
                            CreatedDt = new DateTime(2025, 5, 8, 2, 14, 22, 296, DateTimeKind.Utc).AddTicks(6100),
                            Description = "Order initialization is complete and awaiting confirmation.",
                            Name = "Initialized"
                        },
                        new
                        {
                            Id = 3,
                            CreatedBy = 0,
                            CreatedDt = new DateTime(2025, 5, 8, 2, 14, 22, 296, DateTimeKind.Utc).AddTicks(6100),
                            Description = "Order has been confirmed by the customer or system.",
                            Name = "Confirmed"
                        },
                        new
                        {
                            Id = 4,
                            CreatedBy = 0,
                            CreatedDt = new DateTime(2025, 5, 8, 2, 14, 22, 296, DateTimeKind.Utc).AddTicks(6100),
                            Description = "Order is being processed and items are being prepared.",
                            Name = "Processing"
                        },
                        new
                        {
                            Id = 5,
                            CreatedBy = 0,
                            CreatedDt = new DateTime(2025, 5, 8, 2, 14, 22, 296, DateTimeKind.Utc).AddTicks(6100),
                            Description = "Order items have been packed and are ready for shipping.",
                            Name = "Packed"
                        },
                        new
                        {
                            Id = 6,
                            CreatedBy = 0,
                            CreatedDt = new DateTime(2025, 5, 8, 2, 14, 22, 296, DateTimeKind.Utc).AddTicks(6100),
                            Description = "Order has been shipped to the delivery address.",
                            Name = "Shipped"
                        },
                        new
                        {
                            Id = 7,
                            CreatedBy = 0,
                            CreatedDt = new DateTime(2025, 5, 8, 2, 14, 22, 296, DateTimeKind.Utc).AddTicks(6110),
                            Description = "Order is out for delivery with the carrier.",
                            Name = "OutForDelivery"
                        },
                        new
                        {
                            Id = 8,
                            CreatedBy = 0,
                            CreatedDt = new DateTime(2025, 5, 8, 2, 14, 22, 296, DateTimeKind.Utc).AddTicks(6110),
                            Description = "Order has been delivered to the recipient.",
                            Name = "Delivered"
                        },
                        new
                        {
                            Id = 9,
                            CreatedBy = 0,
                            CreatedDt = new DateTime(2025, 5, 8, 2, 14, 22, 296, DateTimeKind.Utc).AddTicks(6110),
                            Description = "Order has been cancelled and will not be fulfilled.",
                            Name = "Cancelled"
                        },
                        new
                        {
                            Id = 10,
                            CreatedBy = 0,
                            CreatedDt = new DateTime(2025, 5, 8, 2, 14, 22, 296, DateTimeKind.Utc).AddTicks(6110),
                            Description = "Order has been returned by the customer.",
                            Name = "Returned"
                        },
                        new
                        {
                            Id = 11,
                            CreatedBy = 0,
                            CreatedDt = new DateTime(2025, 5, 8, 2, 14, 22, 296, DateTimeKind.Utc).AddTicks(6110),
                            Description = "Order payment has been refunded.",
                            Name = "Refunded"
                        });
                });

            modelBuilder.Entity("tenkiu.api.order.Models.Entities.StatusOrderDetail", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int(11)")
                        .HasColumnName("ID_Status_Order_Detail");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int(11)")
                        .HasColumnName("Created_by");

                    b.Property<DateTime>("CreatedDt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasColumnName("Created_dt")
                        .HasDefaultValueSql("current_timestamp()");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int(11)")
                        .HasColumnName("Modified_by");

                    b.Property<DateTime?>("ModifiedDt")
                        .HasColumnType("timestamp")
                        .HasColumnName("Modified_dt");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("Status_Order_Detail");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedBy = 0,
                            CreatedDt = new DateTime(2025, 5, 8, 2, 14, 22, 296, DateTimeKind.Utc).AddTicks(6230),
                            Description = "Product is pending purchase.",
                            Name = "Pending"
                        },
                        new
                        {
                            Id = 2,
                            CreatedBy = 0,
                            CreatedDt = new DateTime(2025, 5, 8, 2, 14, 22, 296, DateTimeKind.Utc).AddTicks(6230),
                            Description = "Product purchase has been completed.",
                            Name = "Purchased"
                        },
                        new
                        {
                            Id = 3,
                            CreatedBy = 0,
                            CreatedDt = new DateTime(2025, 5, 8, 2, 14, 22, 296, DateTimeKind.Utc).AddTicks(6240),
                            Description = "Product is being prepared for shipment.",
                            Name = "InPreparation"
                        },
                        new
                        {
                            Id = 4,
                            CreatedBy = 0,
                            CreatedDt = new DateTime(2025, 5, 8, 2, 14, 22, 296, DateTimeKind.Utc).AddTicks(6240),
                            Description = "Product has been packaged.",
                            Name = "Packed"
                        },
                        new
                        {
                            Id = 5,
                            CreatedBy = 0,
                            CreatedDt = new DateTime(2025, 5, 8, 2, 14, 22, 296, DateTimeKind.Utc).AddTicks(6240),
                            Description = "Product is in transit to the destination.",
                            Name = "InTransit"
                        },
                        new
                        {
                            Id = 6,
                            CreatedBy = 0,
                            CreatedDt = new DateTime(2025, 5, 8, 2, 14, 22, 296, DateTimeKind.Utc).AddTicks(6240),
                            Description = "Product has been delivered to the recipient.",
                            Name = "Delivered"
                        },
                        new
                        {
                            Id = 7,
                            CreatedBy = 0,
                            CreatedDt = new DateTime(2025, 5, 8, 2, 14, 22, 296, DateTimeKind.Utc).AddTicks(6240),
                            Description = "Product order has been cancelled.",
                            Name = "Cancelled"
                        },
                        new
                        {
                            Id = 8,
                            CreatedBy = 0,
                            CreatedDt = new DateTime(2025, 5, 8, 2, 14, 22, 296, DateTimeKind.Utc).AddTicks(6240),
                            Description = "Product has been returned by the customer.",
                            Name = "Returned"
                        },
                        new
                        {
                            Id = 9,
                            CreatedBy = 0,
                            CreatedDt = new DateTime(2025, 5, 8, 2, 14, 22, 296, DateTimeKind.Utc).AddTicks(6240),
                            Description = "Product is on backorder due to stock unavailability.",
                            Name = "Backordered"
                        });
                });

            modelBuilder.Entity("tenkiu.api.order.Models.Entities.OrderDetail", b =>
                {
                    b.HasOne("tenkiu.api.order.Models.Entities.Order", "Order")
                        .WithMany("OrderDetails")
                        .HasForeignKey("IdOrder")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("Order_Details_ibfk_1");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("tenkiu.api.order.Models.Entities.PaymentHistory", b =>
                {
                    b.HasOne("tenkiu.api.order.Models.Entities.Order", "Order")
                        .WithMany("PaymentHistories")
                        .HasForeignKey("IdOrder")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("Payment_History_ibfk_1");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("tenkiu.api.order.Models.Entities.RelationOrderDetailsStatus", b =>
                {
                    b.HasOne("tenkiu.api.order.Models.Entities.OrderDetail", "OrderDetail")
                        .WithMany("RelationOrderDetailsStatuses")
                        .HasForeignKey("IdOrderDetails")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("Relation_Order_Details_Status_ibfk_1");

                    b.HasOne("tenkiu.api.order.Models.Entities.StatusOrderDetail", "StatusOrderDetail")
                        .WithMany("RelationOrderDetailsStatuses")
                        .HasForeignKey("IdStatusProduct")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("Relation_Order_Details_Status_ibfk_2");

                    b.Navigation("OrderDetail");

                    b.Navigation("StatusOrderDetail");
                });

            modelBuilder.Entity("tenkiu.api.order.Models.Entities.RelationOrderStatus", b =>
                {
                    b.HasOne("tenkiu.api.order.Models.Entities.Order", "Order")
                        .WithMany("RelationOrderStatuses")
                        .HasForeignKey("IdOrder")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("Relation_Order_Status_ibfk_1");

                    b.HasOne("tenkiu.api.order.Models.Entities.StatusOrder", "StatusOrder")
                        .WithMany("RelationOrderStatuses")
                        .HasForeignKey("IdStatusOrder")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("Relation_Order_Status_ibfk_2");

                    b.Navigation("Order");

                    b.Navigation("StatusOrder");
                });

            modelBuilder.Entity("tenkiu.api.order.Models.Entities.Shipping", b =>
                {
                    b.HasOne("tenkiu.api.order.Models.Entities.Order", "Order")
                        .WithMany("Shippings")
                        .HasForeignKey("IdOrder")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("Shipping_ibfk_1");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("tenkiu.api.order.Models.Entities.Order", b =>
                {
                    b.Navigation("OrderDetails");

                    b.Navigation("PaymentHistories");

                    b.Navigation("RelationOrderStatuses");

                    b.Navigation("Shippings");
                });

            modelBuilder.Entity("tenkiu.api.order.Models.Entities.OrderDetail", b =>
                {
                    b.Navigation("RelationOrderDetailsStatuses");
                });

            modelBuilder.Entity("tenkiu.api.order.Models.Entities.StatusOrder", b =>
                {
                    b.Navigation("RelationOrderStatuses");
                });

            modelBuilder.Entity("tenkiu.api.order.Models.Entities.StatusOrderDetail", b =>
                {
                    b.Navigation("RelationOrderDetailsStatuses");
                });
#pragma warning restore 612, 618
        }
    }
}
